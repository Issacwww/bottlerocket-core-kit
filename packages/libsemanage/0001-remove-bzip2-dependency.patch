From 227391a3403dc480c31e5d8dc96aaa085e91610a Mon Sep 17 00:00:00 2001
From: Ben Cressey <bcressey@amazon.com>
Date: Sat, 30 Mar 2024 04:57:02 +0000
Subject: [PATCH] remove bzip2 dependency

Signed-off-by: Ben Cressey <bcressey@amazon.com>
---
 src/Makefile          |   2 +-
 src/compressed_file.c | 179 ++++++------------------------------------
 src/libsemanage.pc.in |   1 -
 tests/Makefile        |   2 +-
 4 files changed, 26 insertions(+), 158 deletions(-)

diff --git a/src/Makefile b/src/Makefile
index d525996..314d064 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -90,7 +90,7 @@ $(LIBA): $(OBJS)
 	$(RANLIB) $@
 
 $(LIBSO): $(LOBJS)
-	$(CC) $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) -shared -o $@ $^ -lsepol -laudit -lselinux -lbz2 -Wl,-soname,$(LIBSO),--version-script=libsemanage.map,-z,defs
+	$(CC) $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) -shared -o $@ $^ -lsepol -laudit -lselinux -Wl,-soname,$(LIBSO),--version-script=libsemanage.map,-z,defs
 	ln -sf $@ $(TARGET)
 
 $(LIBPC): $(LIBPC).in ../VERSION
diff --git a/src/compressed_file.c b/src/compressed_file.c
index 5546b83..3632d79 100644
--- a/src/compressed_file.c
+++ b/src/compressed_file.c
@@ -27,148 +27,14 @@
 #include <unistd.h>
 #include <fcntl.h>
 
-#include <bzlib.h>
-
 #include "compressed_file.h"
 
 #include "debug.h"
 
-#define BZ2_MAGICSTR "BZh"
-#define BZ2_MAGICLEN (sizeof(BZ2_MAGICSTR)-1)
-
-/* bzip() a data to a file, returning the total number of compressed bytes
- * in the file.  Returns -1 if file could not be compressed. */
-static int bzip(semanage_handle_t *sh, const char *filename, void *data,
-		size_t num_bytes)
-{
-	BZFILE* b;
-	size_t  size = 1<<16;
-	int     bzerror;
-	size_t  total = 0;
-	size_t len = 0;
-	FILE *f;
-
-	if ((f = fopen(filename, "wb")) == NULL) {
-		return -1;
-	}
-
-	if (!sh->conf->bzip_blocksize) {
-		if (fwrite(data, 1, num_bytes, f) < num_bytes) {
-			fclose(f);
-			return -1;
-		}
-		fclose(f);
-		return 0;
-	}
-
-	b = BZ2_bzWriteOpen( &bzerror, f, sh->conf->bzip_blocksize, 0, 0);
-	if (bzerror != BZ_OK) {
-		BZ2_bzWriteClose ( &bzerror, b, 1, 0, 0 );
-		fclose(f);
-		return -1;
-	}
-
-	while ( num_bytes > total ) {
-		if (num_bytes - total > size) {
-			len = size;
-		} else {
-			len = num_bytes - total;
-		}
-		BZ2_bzWrite ( &bzerror, b, (uint8_t *)data + total, len );
-		if (bzerror == BZ_IO_ERROR) {
-			BZ2_bzWriteClose ( &bzerror, b, 1, 0, 0 );
-			fclose(f);
-			return -1;
-		}
-		total += len;
-	}
-
-	BZ2_bzWriteClose ( &bzerror, b, 0, 0, 0 );
-	fclose(f);
-	if (bzerror == BZ_IO_ERROR) {
-		return -1;
-	}
-	return 0;
-}
-
-/* bunzip() a file to '*data', returning the total number of uncompressed bytes
- * in the file.  Returns -1 if file could not be decompressed. */
-static ssize_t bunzip(semanage_handle_t *sh, FILE *f, void **data)
-{
-	BZFILE*  b = NULL;
-	size_t   nBuf;
-	uint8_t* buf = NULL;
-	size_t   size = 1<<18;
-	size_t   bufsize = size;
-	int      bzerror;
-	size_t   total = 0;
-	uint8_t* uncompress = NULL;
-	uint8_t* tmpalloc = NULL;
-	int      ret = -1;
-
-	buf = malloc(bufsize);
-	if (buf == NULL) {
-		ERR(sh, "Failure allocating memory.");
-		goto exit;
-	}
-
-	/* Check if the file is bzipped */
-	bzerror = fread(buf, 1, BZ2_MAGICLEN, f);
-	rewind(f);
-	if ((bzerror != BZ2_MAGICLEN) || memcmp(buf, BZ2_MAGICSTR, BZ2_MAGICLEN)) {
-		goto exit;
-	}
-
-	b = BZ2_bzReadOpen ( &bzerror, f, 0, sh->conf->bzip_small, NULL, 0 );
-	if ( bzerror != BZ_OK ) {
-		ERR(sh, "Failure opening bz2 archive.");
-		goto exit;
-	}
-
-	uncompress = malloc(size);
-	if (uncompress == NULL) {
-		ERR(sh, "Failure allocating memory.");
-		goto exit;
-	}
-
-	while ( bzerror == BZ_OK) {
-		nBuf = BZ2_bzRead ( &bzerror, b, buf, bufsize);
-		if (( bzerror == BZ_OK ) || ( bzerror == BZ_STREAM_END )) {
-			if (total + nBuf > size) {
-				size *= 2;
-				tmpalloc = realloc(uncompress, size);
-				if (tmpalloc == NULL) {
-					ERR(sh, "Failure allocating memory.");
-					goto exit;
-				}
-				uncompress = tmpalloc;
-			}
-			memcpy(&uncompress[total], buf, nBuf);
-			total += nBuf;
-		}
-	}
-	if ( bzerror != BZ_STREAM_END ) {
-		ERR(sh, "Failure reading bz2 archive.");
-		goto exit;
-	}
-
-	ret = total;
-	*data = uncompress;
-
-exit:
-	BZ2_bzReadClose ( &bzerror, b );
-	free(buf);
-	if ( ret < 0 ) {
-		free(uncompress);
-	}
-	return ret;
-}
-
 int map_compressed_file(semanage_handle_t *sh, const char *path,
 			struct file_contents *contents)
 {
-	ssize_t size = -1;
-	void *uncompress;
+	void *data;
 	int ret = 0, fd = -1;
 	FILE *file = NULL;
 
@@ -185,22 +51,17 @@ int map_compressed_file(semanage_handle_t *sh, const char *path,
 		return -1;
 	}
 
-	if ((size = bunzip(sh, file, &uncompress)) >= 0) {
-		contents->data = uncompress;
-		contents->len = size;
-		contents->compressed = 1;
+	struct stat sb;
+	if (fstat(fd, &sb) == -1 ||
+	    (data = mmap(NULL, sb.st_size, PROT_READ, MAP_PRIVATE, fd, 0)) ==
+	    MAP_FAILED) {
+		ret = -1;
 	} else {
-		struct stat sb;
-		if (fstat(fd, &sb) == -1 ||
-		    (uncompress = mmap(NULL, sb.st_size, PROT_READ, MAP_PRIVATE, fd, 0)) ==
-		    MAP_FAILED) {
-			ret = -1;
-		} else {
-			contents->data = uncompress;
-			contents->len = sb.st_size;
-			contents->compressed = 0;
-		}
+		contents->data = data;
+		contents->len = sb.st_size;
+		contents->compressed = 0;
 	}
+
 	fclose(file);
 	return ret;
 }
@@ -210,15 +71,23 @@ void unmap_compressed_file(struct file_contents *contents)
 	if (!contents->data)
 		return;
 
-	if (contents->compressed) {
-		free(contents->data);
-	} else {
-		munmap(contents->data, contents->len);
-	}
+	munmap(contents->data, contents->len);
 }
 
 int write_compressed_file(semanage_handle_t *sh, const char *path,
 			  void *data, size_t len)
 {
-	return bzip(sh, path, data, len);
+	FILE *f;
+
+	if ((f = fopen(path, "wb")) == NULL) {
+		return -1;
+	}
+
+	if (fwrite(data, 1, len, f) < len) {
+		fclose(f);
+		return -1;
+	}
+
+	fclose(f);
+	return 0;
 }
diff --git a/src/libsemanage.pc.in b/src/libsemanage.pc.in
index 43681dd..6616bd1 100644
--- a/src/libsemanage.pc.in
+++ b/src/libsemanage.pc.in
@@ -9,5 +9,4 @@ Version: @VERSION@
 URL: http://userspace.selinuxproject.org/
 Requires.private: libselinux libsepol
 Libs: -L${libdir} -lsemanage
-Libs.private: -lbz2
 Cflags: -I${includedir}
diff --git a/tests/Makefile b/tests/Makefile
index 69f49a3..ff54969 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -7,7 +7,7 @@ CILS = $(sort $(wildcard *.cil))
 EXECUTABLE = libsemanage-tests
 CFLAGS += -g -O0 -Wall -W -Wundef -Wmissing-noreturn -Wmissing-format-attribute -Wno-unused-parameter
 override CFLAGS += -I../src -I../include
-override LDLIBS += -lcunit -lbz2 -laudit -lselinux -lsepol
+override LDLIBS += -lcunit -laudit -lselinux -lsepol
 
 OBJECTS = $(SOURCES:.c=.o)
 POLICIES = $(CILS:.cil=.policy)
-- 
2.44.0

